// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file autograd/v1/autograd.proto (package autograd.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
	BinaryReadOptions,
	FieldList,
	JsonReadOptions,
	JsonValue,
	PartialMessage,
	PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum autograd.v1.AssignmentType
 */
export enum AssignmentType {
	/**
	 * @generated from enum value: ASSIGNMENT_TYPE_UNKNOWN = 0;
	 */
	UNKNOWN = 0,

	/**
	 * @generated from enum value: ASSIGNMENT_TYPE_INPUT = 1;
	 */
	INPUT = 1,

	/**
	 * @generated from enum value: ASSIGNMENT_TYPE_OUTPUT = 2;
	 */
	OUTPUT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AssignmentType)
proto3.util.setEnumType(AssignmentType, "autograd.v1.AssignmentType", [
	{ no: 0, name: "ASSIGNMENT_TYPE_UNKNOWN" },
	{ no: 1, name: "ASSIGNMENT_TYPE_INPUT" },
	{ no: 2, name: "ASSIGNMENT_TYPE_OUTPUT" },
]);

/**
 * @generated from message autograd.v1.Empty
 */
export class Empty extends Message<Empty> {
	constructor(data?: PartialMessage<Empty>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.Empty";
	static readonly fields: FieldList = proto3.util.newFieldList(() => []);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): Empty {
		return new Empty().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): Empty {
		return new Empty().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): Empty {
		return new Empty().fromJsonString(jsonString, options);
	}

	static equals(
		a: Empty | PlainMessage<Empty> | undefined,
		b: Empty | PlainMessage<Empty> | undefined,
	): boolean {
		return proto3.util.equals(Empty, a, b);
	}
}

/**
 * @generated from message autograd.v1.CreatedResponse
 */
export class CreatedResponse extends Message<CreatedResponse> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: string message = 2;
	 */
	message = "";

	constructor(data?: PartialMessage<CreatedResponse>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.CreatedResponse";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): CreatedResponse {
		return new CreatedResponse().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): CreatedResponse {
		return new CreatedResponse().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): CreatedResponse {
		return new CreatedResponse().fromJsonString(jsonString, options);
	}

	static equals(
		a: CreatedResponse | PlainMessage<CreatedResponse> | undefined,
		b: CreatedResponse | PlainMessage<CreatedResponse> | undefined,
	): boolean {
		return proto3.util.equals(CreatedResponse, a, b);
	}
}

/**
 * @generated from message autograd.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
	/**
	 * @generated from field: string message = 1;
	 */
	message = "";

	constructor(data?: PartialMessage<PingResponse>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.PingResponse";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): PingResponse {
		return new PingResponse().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): PingResponse {
		return new PingResponse().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): PingResponse {
		return new PingResponse().fromJsonString(jsonString, options);
	}

	static equals(
		a: PingResponse | PlainMessage<PingResponse> | undefined,
		b: PingResponse | PlainMessage<PingResponse> | undefined,
	): boolean {
		return proto3.util.equals(PingResponse, a, b);
	}
}

/**
 * @generated from message autograd.v1.FindByIDRequest
 */
export class FindByIDRequest extends Message<FindByIDRequest> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	constructor(data?: PartialMessage<FindByIDRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.FindByIDRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): FindByIDRequest {
		return new FindByIDRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): FindByIDRequest {
		return new FindByIDRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): FindByIDRequest {
		return new FindByIDRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a: FindByIDRequest | PlainMessage<FindByIDRequest> | undefined,
		b: FindByIDRequest | PlainMessage<FindByIDRequest> | undefined,
	): boolean {
		return proto3.util.equals(FindByIDRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.DeleteByIDRequest
 */
export class DeleteByIDRequest extends Message<DeleteByIDRequest> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	constructor(data?: PartialMessage<DeleteByIDRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.DeleteByIDRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): DeleteByIDRequest {
		return new DeleteByIDRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): DeleteByIDRequest {
		return new DeleteByIDRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): DeleteByIDRequest {
		return new DeleteByIDRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a: DeleteByIDRequest | PlainMessage<DeleteByIDRequest> | undefined,
		b: DeleteByIDRequest | PlainMessage<DeleteByIDRequest> | undefined,
	): boolean {
		return proto3.util.equals(DeleteByIDRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.CreateManagedUserRequest
 */
export class CreateManagedUserRequest extends Message<CreateManagedUserRequest> {
	/**
	 * @generated from field: string name = 1;
	 */
	name = "";

	/**
	 * @generated from field: string email = 2;
	 */
	email = "";

	/**
	 * @generated from field: string role = 3;
	 */
	role = "";

	constructor(data?: PartialMessage<CreateManagedUserRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.CreateManagedUserRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): CreateManagedUserRequest {
		return new CreateManagedUserRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): CreateManagedUserRequest {
		return new CreateManagedUserRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): CreateManagedUserRequest {
		return new CreateManagedUserRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a:
			| CreateManagedUserRequest
			| PlainMessage<CreateManagedUserRequest>
			| undefined,
		b:
			| CreateManagedUserRequest
			| PlainMessage<CreateManagedUserRequest>
			| undefined,
	): boolean {
		return proto3.util.equals(CreateManagedUserRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.TimestampMetadata
 */
export class TimestampMetadata extends Message<TimestampMetadata> {
	/**
	 * @generated from field: string created_at = 1;
	 */
	createdAt = "";

	/**
	 * @generated from field: string updated_at = 2;
	 */
	updatedAt = "";

	constructor(data?: PartialMessage<TimestampMetadata>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.TimestampMetadata";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): TimestampMetadata {
		return new TimestampMetadata().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): TimestampMetadata {
		return new TimestampMetadata().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): TimestampMetadata {
		return new TimestampMetadata().fromJsonString(jsonString, options);
	}

	static equals(
		a: TimestampMetadata | PlainMessage<TimestampMetadata> | undefined,
		b: TimestampMetadata | PlainMessage<TimestampMetadata> | undefined,
	): boolean {
		return proto3.util.equals(TimestampMetadata, a, b);
	}
}

/**
 * @generated from message autograd.v1.AssignmentFile
 */
export class AssignmentFile extends Message<AssignmentFile> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: string description = 2;
	 */
	description = "";

	/**
	 * @generated from field: string url = 3;
	 */
	url = "";

	/**
	 * @generated from field: autograd.v1.TimestampMetadata timestamp_metadata = 5;
	 */
	timestampMetadata?: TimestampMetadata;

	constructor(data?: PartialMessage<AssignmentFile>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.AssignmentFile";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{
			no: 2,
			name: "description",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{ no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{
			no: 5,
			name: "timestamp_metadata",
			kind: "message",
			T: TimestampMetadata,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): AssignmentFile {
		return new AssignmentFile().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): AssignmentFile {
		return new AssignmentFile().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): AssignmentFile {
		return new AssignmentFile().fromJsonString(jsonString, options);
	}

	static equals(
		a: AssignmentFile | PlainMessage<AssignmentFile> | undefined,
		b: AssignmentFile | PlainMessage<AssignmentFile> | undefined,
	): boolean {
		return proto3.util.equals(AssignmentFile, a, b);
	}
}

/**
 * @generated from message autograd.v1.SubmissionFile
 */
export class SubmissionFile extends Message<SubmissionFile> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: string url = 2;
	 */
	url = "";

	/**
	 * @generated from field: autograd.v1.TimestampMetadata timestamp_metadata = 3;
	 */
	timestampMetadata?: TimestampMetadata;

	constructor(data?: PartialMessage<SubmissionFile>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.SubmissionFile";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{
			no: 3,
			name: "timestamp_metadata",
			kind: "message",
			T: TimestampMetadata,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): SubmissionFile {
		return new SubmissionFile().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): SubmissionFile {
		return new SubmissionFile().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): SubmissionFile {
		return new SubmissionFile().fromJsonString(jsonString, options);
	}

	static equals(
		a: SubmissionFile | PlainMessage<SubmissionFile> | undefined,
		b: SubmissionFile | PlainMessage<SubmissionFile> | undefined,
	): boolean {
		return proto3.util.equals(SubmissionFile, a, b);
	}
}

/**
 * @generated from message autograd.v1.Submitter
 */
export class Submitter extends Message<Submitter> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: string name = 2;
	 */
	name = "";

	constructor(data?: PartialMessage<Submitter>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.Submitter";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): Submitter {
		return new Submitter().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): Submitter {
		return new Submitter().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): Submitter {
		return new Submitter().fromJsonString(jsonString, options);
	}

	static equals(
		a: Submitter | PlainMessage<Submitter> | undefined,
		b: Submitter | PlainMessage<Submitter> | undefined,
	): boolean {
		return proto3.util.equals(Submitter, a, b);
	}
}

/**
 * @generated from message autograd.v1.Assigner
 */
export class Assigner extends Message<Assigner> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: string name = 2;
	 */
	name = "";

	constructor(data?: PartialMessage<Assigner>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.Assigner";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): Assigner {
		return new Assigner().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): Assigner {
		return new Assigner().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): Assigner {
		return new Assigner().fromJsonString(jsonString, options);
	}

	static equals(
		a: Assigner | PlainMessage<Assigner> | undefined,
		b: Assigner | PlainMessage<Assigner> | undefined,
	): boolean {
		return proto3.util.equals(Assigner, a, b);
	}
}

/**
 * @generated from message autograd.v1.Assignment
 */
export class Assignment extends Message<Assignment> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: string name = 2;
	 */
	name = "";

	/**
	 * @generated from field: string description = 3;
	 */
	description = "";

	/**
	 * @generated from field: autograd.v1.Assigner assigner = 4;
	 */
	assigner?: Assigner;

	/**
	 * @generated from field: autograd.v1.AssignmentFile case_input_file = 5;
	 */
	caseInputFile?: AssignmentFile;

	/**
	 * @generated from field: autograd.v1.AssignmentFile case_output_file = 6;
	 */
	caseOutputFile?: AssignmentFile;

	/**
	 * @generated from field: autograd.v1.TimestampMetadata timestamp_metadata = 7;
	 */
	timestampMetadata?: TimestampMetadata;

	constructor(data?: PartialMessage<Assignment>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.Assignment";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{
			no: 3,
			name: "description",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{ no: 4, name: "assigner", kind: "message", T: Assigner },
		{ no: 5, name: "case_input_file", kind: "message", T: AssignmentFile },
		{ no: 6, name: "case_output_file", kind: "message", T: AssignmentFile },
		{
			no: 7,
			name: "timestamp_metadata",
			kind: "message",
			T: TimestampMetadata,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): Assignment {
		return new Assignment().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): Assignment {
		return new Assignment().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): Assignment {
		return new Assignment().fromJsonString(jsonString, options);
	}

	static equals(
		a: Assignment | PlainMessage<Assignment> | undefined,
		b: Assignment | PlainMessage<Assignment> | undefined,
	): boolean {
		return proto3.util.equals(Assignment, a, b);
	}
}

/**
 * @generated from message autograd.v1.Submission
 */
export class Submission extends Message<Submission> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: autograd.v1.Assignment assignment = 2;
	 */
	assignment?: Assignment;

	/**
	 * @generated from field: autograd.v1.Submitter submitter = 3;
	 */
	submitter?: Submitter;

	/**
	 * @generated from field: autograd.v1.SubmissionFile submission_file = 4;
	 */
	submissionFile?: SubmissionFile;

	/**
	 * @generated from field: autograd.v1.TimestampMetadata timestamp_metadata = 5;
	 */
	timestampMetadata?: TimestampMetadata;

	constructor(data?: PartialMessage<Submission>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.Submission";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "assignment", kind: "message", T: Assignment },
		{ no: 3, name: "submitter", kind: "message", T: Submitter },
		{ no: 4, name: "submission_file", kind: "message", T: SubmissionFile },
		{
			no: 5,
			name: "timestamp_metadata",
			kind: "message",
			T: TimestampMetadata,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): Submission {
		return new Submission().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): Submission {
		return new Submission().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): Submission {
		return new Submission().fromJsonString(jsonString, options);
	}

	static equals(
		a: Submission | PlainMessage<Submission> | undefined,
		b: Submission | PlainMessage<Submission> | undefined,
	): boolean {
		return proto3.util.equals(Submission, a, b);
	}
}

/**
 * @generated from message autograd.v1.UpdateAssignmentRequest
 */
export class UpdateAssignmentRequest extends Message<UpdateAssignmentRequest> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: string name = 2;
	 */
	name = "";

	/**
	 * @generated from field: string description = 3;
	 */
	description = "";

	/**
	 * @generated from field: string case_input_file_id = 4;
	 */
	caseInputFileId = "";

	/**
	 * @generated from field: string case_output_file_id = 5;
	 */
	caseOutputFileId = "";

	constructor(data?: PartialMessage<UpdateAssignmentRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.UpdateAssignmentRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{
			no: 3,
			name: "description",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{
			no: 4,
			name: "case_input_file_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{
			no: 5,
			name: "case_output_file_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): UpdateAssignmentRequest {
		return new UpdateAssignmentRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): UpdateAssignmentRequest {
		return new UpdateAssignmentRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): UpdateAssignmentRequest {
		return new UpdateAssignmentRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a:
			| UpdateAssignmentRequest
			| PlainMessage<UpdateAssignmentRequest>
			| undefined,
		b:
			| UpdateAssignmentRequest
			| PlainMessage<UpdateAssignmentRequest>
			| undefined,
	): boolean {
		return proto3.util.equals(UpdateAssignmentRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.CreateAssignmentRequest
 */
export class CreateAssignmentRequest extends Message<CreateAssignmentRequest> {
	/**
	 * @generated from field: string name = 1;
	 */
	name = "";

	/**
	 * @generated from field: string description = 2;
	 */
	description = "";

	/**
	 * @generated from field: string case_input_file_id = 3;
	 */
	caseInputFileId = "";

	/**
	 * @generated from field: string case_output_file_id = 4;
	 */
	caseOutputFileId = "";

	constructor(data?: PartialMessage<CreateAssignmentRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.CreateAssignmentRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{
			no: 2,
			name: "description",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{
			no: 3,
			name: "case_input_file_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{
			no: 4,
			name: "case_output_file_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): CreateAssignmentRequest {
		return new CreateAssignmentRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): CreateAssignmentRequest {
		return new CreateAssignmentRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): CreateAssignmentRequest {
		return new CreateAssignmentRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a:
			| CreateAssignmentRequest
			| PlainMessage<CreateAssignmentRequest>
			| undefined,
		b:
			| CreateAssignmentRequest
			| PlainMessage<CreateAssignmentRequest>
			| undefined,
	): boolean {
		return proto3.util.equals(CreateAssignmentRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.CreateSubmissionRequest
 */
export class CreateSubmissionRequest extends Message<CreateSubmissionRequest> {
	/**
	 * @generated from field: string assignment_id = 1;
	 */
	assignmentId = "";

	/**
	 * @generated from field: string submitter_id = 2;
	 */
	submitterId = "";

	/**
	 * @generated from field: string source_file_id = 3;
	 */
	sourceFileId = "";

	constructor(data?: PartialMessage<CreateSubmissionRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.CreateSubmissionRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{
			no: 1,
			name: "assignment_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{
			no: 2,
			name: "submitter_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{
			no: 3,
			name: "source_file_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): CreateSubmissionRequest {
		return new CreateSubmissionRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): CreateSubmissionRequest {
		return new CreateSubmissionRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): CreateSubmissionRequest {
		return new CreateSubmissionRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a:
			| CreateSubmissionRequest
			| PlainMessage<CreateSubmissionRequest>
			| undefined,
		b:
			| CreateSubmissionRequest
			| PlainMessage<CreateSubmissionRequest>
			| undefined,
	): boolean {
		return proto3.util.equals(CreateSubmissionRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.UpdateSubmissionRequest
 */
export class UpdateSubmissionRequest extends Message<UpdateSubmissionRequest> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: string submitter_id = 2;
	 */
	submitterId = "";

	/**
	 * @generated from field: string source_file_id = 3;
	 */
	sourceFileId = "";

	constructor(data?: PartialMessage<UpdateSubmissionRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.UpdateSubmissionRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{
			no: 2,
			name: "submitter_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{
			no: 3,
			name: "source_file_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): UpdateSubmissionRequest {
		return new UpdateSubmissionRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): UpdateSubmissionRequest {
		return new UpdateSubmissionRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): UpdateSubmissionRequest {
		return new UpdateSubmissionRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a:
			| UpdateSubmissionRequest
			| PlainMessage<UpdateSubmissionRequest>
			| undefined,
		b:
			| UpdateSubmissionRequest
			| PlainMessage<UpdateSubmissionRequest>
			| undefined,
	): boolean {
		return proto3.util.equals(UpdateSubmissionRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
	/**
	 * @generated from field: string email = 1;
	 */
	email = "";

	/**
	 * @generated from field: string password = 2;
	 */
	password = "";

	constructor(data?: PartialMessage<LoginRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.LoginRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): LoginRequest {
		return new LoginRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): LoginRequest {
		return new LoginRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): LoginRequest {
		return new LoginRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a: LoginRequest | PlainMessage<LoginRequest> | undefined,
		b: LoginRequest | PlainMessage<LoginRequest> | undefined,
	): boolean {
		return proto3.util.equals(LoginRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
	/**
	 * @generated from field: string token = 1;
	 */
	token = "";

	constructor(data?: PartialMessage<LoginResponse>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.LoginResponse";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): LoginResponse {
		return new LoginResponse().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): LoginResponse {
		return new LoginResponse().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): LoginResponse {
		return new LoginResponse().fromJsonString(jsonString, options);
	}

	static equals(
		a: LoginResponse | PlainMessage<LoginResponse> | undefined,
		b: LoginResponse | PlainMessage<LoginResponse> | undefined,
	): boolean {
		return proto3.util.equals(LoginResponse, a, b);
	}
}

/**
 * @generated from message autograd.v1.FindAllAssignmentsRequest
 */
export class FindAllAssignmentsRequest extends Message<FindAllAssignmentsRequest> {
	/**
	 * @generated from field: int32 page = 1;
	 */
	page = 0;

	/**
	 * @generated from field: int32 limit = 2;
	 */
	limit = 0;

	constructor(data?: PartialMessage<FindAllAssignmentsRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.FindAllAssignmentsRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
		{ no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): FindAllAssignmentsRequest {
		return new FindAllAssignmentsRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): FindAllAssignmentsRequest {
		return new FindAllAssignmentsRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): FindAllAssignmentsRequest {
		return new FindAllAssignmentsRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a:
			| FindAllAssignmentsRequest
			| PlainMessage<FindAllAssignmentsRequest>
			| undefined,
		b:
			| FindAllAssignmentsRequest
			| PlainMessage<FindAllAssignmentsRequest>
			| undefined,
	): boolean {
		return proto3.util.equals(FindAllAssignmentsRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.PaginationMetadata
 */
export class PaginationMetadata extends Message<PaginationMetadata> {
	/**
	 * @generated from field: int32 page = 1;
	 */
	page = 0;

	/**
	 * @generated from field: int32 limit = 2;
	 */
	limit = 0;

	/**
	 * @generated from field: int32 total = 3;
	 */
	total = 0;

	constructor(data?: PartialMessage<PaginationMetadata>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.PaginationMetadata";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
		{ no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
		{ no: 3, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): PaginationMetadata {
		return new PaginationMetadata().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): PaginationMetadata {
		return new PaginationMetadata().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): PaginationMetadata {
		return new PaginationMetadata().fromJsonString(jsonString, options);
	}

	static equals(
		a: PaginationMetadata | PlainMessage<PaginationMetadata> | undefined,
		b: PaginationMetadata | PlainMessage<PaginationMetadata> | undefined,
	): boolean {
		return proto3.util.equals(PaginationMetadata, a, b);
	}
}

/**
 * @generated from message autograd.v1.FindAllAssignmentsResponse
 */
export class FindAllAssignmentsResponse extends Message<FindAllAssignmentsResponse> {
	/**
	 * @generated from field: repeated autograd.v1.Assignment assignments = 1;
	 */
	assignments: Assignment[] = [];

	/**
	 * @generated from field: autograd.v1.PaginationMetadata pagination_metadata = 2;
	 */
	paginationMetadata?: PaginationMetadata;

	constructor(data?: PartialMessage<FindAllAssignmentsResponse>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.FindAllAssignmentsResponse";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{
			no: 1,
			name: "assignments",
			kind: "message",
			T: Assignment,
			repeated: true,
		},
		{
			no: 2,
			name: "pagination_metadata",
			kind: "message",
			T: PaginationMetadata,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): FindAllAssignmentsResponse {
		return new FindAllAssignmentsResponse().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): FindAllAssignmentsResponse {
		return new FindAllAssignmentsResponse().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): FindAllAssignmentsResponse {
		return new FindAllAssignmentsResponse().fromJsonString(jsonString, options);
	}

	static equals(
		a:
			| FindAllAssignmentsResponse
			| PlainMessage<FindAllAssignmentsResponse>
			| undefined,
		b:
			| FindAllAssignmentsResponse
			| PlainMessage<FindAllAssignmentsResponse>
			| undefined,
	): boolean {
		return proto3.util.equals(FindAllAssignmentsResponse, a, b);
	}
}

/**
 * @generated from message autograd.v1.ManagedUser
 */
export class ManagedUser extends Message<ManagedUser> {
	/**
	 * @generated from field: string id = 1;
	 */
	id = "";

	/**
	 * @generated from field: string name = 2;
	 */
	name = "";

	/**
	 * @generated from field: string email = 3;
	 */
	email = "";

	/**
	 * @generated from field: string role = 4;
	 */
	role = "";

	/**
	 * @generated from field: autograd.v1.TimestampMetadata timestamp_metadata = 5;
	 */
	timestampMetadata?: TimestampMetadata;

	constructor(data?: PartialMessage<ManagedUser>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.ManagedUser";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{
			no: 5,
			name: "timestamp_metadata",
			kind: "message",
			T: TimestampMetadata,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): ManagedUser {
		return new ManagedUser().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): ManagedUser {
		return new ManagedUser().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): ManagedUser {
		return new ManagedUser().fromJsonString(jsonString, options);
	}

	static equals(
		a: ManagedUser | PlainMessage<ManagedUser> | undefined,
		b: ManagedUser | PlainMessage<ManagedUser> | undefined,
	): boolean {
		return proto3.util.equals(ManagedUser, a, b);
	}
}

/**
 * @generated from message autograd.v1.FindAllManagedUsersRequest
 */
export class FindAllManagedUsersRequest extends Message<FindAllManagedUsersRequest> {
	/**
	 * @generated from field: int32 page = 1;
	 */
	page = 0;

	/**
	 * @generated from field: int32 limit = 2;
	 */
	limit = 0;

	constructor(data?: PartialMessage<FindAllManagedUsersRequest>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.FindAllManagedUsersRequest";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
		{ no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): FindAllManagedUsersRequest {
		return new FindAllManagedUsersRequest().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): FindAllManagedUsersRequest {
		return new FindAllManagedUsersRequest().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): FindAllManagedUsersRequest {
		return new FindAllManagedUsersRequest().fromJsonString(jsonString, options);
	}

	static equals(
		a:
			| FindAllManagedUsersRequest
			| PlainMessage<FindAllManagedUsersRequest>
			| undefined,
		b:
			| FindAllManagedUsersRequest
			| PlainMessage<FindAllManagedUsersRequest>
			| undefined,
	): boolean {
		return proto3.util.equals(FindAllManagedUsersRequest, a, b);
	}
}

/**
 * @generated from message autograd.v1.FindAllManagedUsersResponse
 */
export class FindAllManagedUsersResponse extends Message<FindAllManagedUsersResponse> {
	/**
	 * @generated from field: repeated autograd.v1.ManagedUser managed_users = 1;
	 */
	managedUsers: ManagedUser[] = [];

	/**
	 * @generated from field: autograd.v1.PaginationMetadata pagination_metadata = 2;
	 */
	paginationMetadata?: PaginationMetadata;

	constructor(data?: PartialMessage<FindAllManagedUsersResponse>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "autograd.v1.FindAllManagedUsersResponse";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{
			no: 1,
			name: "managed_users",
			kind: "message",
			T: ManagedUser,
			repeated: true,
		},
		{
			no: 2,
			name: "pagination_metadata",
			kind: "message",
			T: PaginationMetadata,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>,
	): FindAllManagedUsersResponse {
		return new FindAllManagedUsersResponse().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>,
	): FindAllManagedUsersResponse {
		return new FindAllManagedUsersResponse().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>,
	): FindAllManagedUsersResponse {
		return new FindAllManagedUsersResponse().fromJsonString(
			jsonString,
			options,
		);
	}

	static equals(
		a:
			| FindAllManagedUsersResponse
			| PlainMessage<FindAllManagedUsersResponse>
			| undefined,
		b:
			| FindAllManagedUsersResponse
			| PlainMessage<FindAllManagedUsersResponse>
			| undefined,
	): boolean {
		return proto3.util.equals(FindAllManagedUsersResponse, a, b);
	}
}
