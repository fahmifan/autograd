// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: courses.writer.sql

package xsqlc

import (
	"context"
	"time"
)

const saveCourse = `-- name: SaveCourse :one
INSERT INTO courses (
    id, 
    "name", 
    "description", 
    is_active, 
    created_at, 
    updated_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
ON CONFLICT (id) DO UPDATE
SET
    "name" = $2,
    "description" = $3,
    is_active = $4,
    updated_at = $6
RETURNING id
`

type SaveCourseParams struct {
	ID          string
	Name        string
	Description string
	IsActive    bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) SaveCourse(ctx context.Context, arg SaveCourseParams) (string, error) {
	row := q.db.QueryRowContext(ctx, saveCourse,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const saveRelCourseUser = `-- name: SaveRelCourseUser :exec
INSERT INTO rel_course_users (
    course_id, 
    user_id, 
    user_type
)
VALUES (
    $1,
    $2,
    $3
)
`

type SaveRelCourseUserParams struct {
	CourseID string
	UserID   string
	UserType string
}

func (q *Queries) SaveRelCourseUser(ctx context.Context, arg SaveRelCourseUserParams) error {
	_, err := q.db.ExecContext(ctx, saveRelCourseUser, arg.CourseID, arg.UserID, arg.UserType)
	return err
}
