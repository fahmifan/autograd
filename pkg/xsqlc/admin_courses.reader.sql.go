// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: admin_courses.reader.sql

package xsqlc

import (
	"context"
)

const countAllCourseStudents = `-- name: CountAllCourseStudents :one
SELECT COUNT(rel.user_id) FROM rel_course_users rel
WHERE rel.course_id = $1
`

func (q *Queries) CountAllCourseStudents(ctx context.Context, courseID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllCourseStudents, courseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllCoursesByUser = `-- name: CountAllCoursesByUser :one
SELECT COUNT(*) FROM courses
WHERE id IN (SELECT course_id FROM rel_course_users WHERE user_id = $1)
AND deleted_at IS NULL
`

func (q *Queries) CountAllCoursesByUser(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllCoursesByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findAllCourseStudents = `-- name: FindAllCourseStudents :many
SELECT u.id, u.name FROM users u
WHERE u.id IN (
    SELECT rel.user_id FROM rel_course_users rel
    WHERE rel.course_id = $1
    LIMIT $3
    OFFSET $2
)
AND u.deleted_at IS NULL
ORDER BY u.id DESC
`

type FindAllCourseStudentsParams struct {
	CourseID   string
	PageOffset int32
	PageLimit  int32
}

type FindAllCourseStudentsRow struct {
	ID   string
	Name string
}

func (q *Queries) FindAllCourseStudents(ctx context.Context, arg FindAllCourseStudentsParams) ([]FindAllCourseStudentsRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllCourseStudents, arg.CourseID, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllCourseStudentsRow
	for rows.Next() {
		var i FindAllCourseStudentsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllCoursesByUser = `-- name: FindAllCoursesByUser :many
SELECT id, name, description, is_active, created_at, updated_at, deleted_at FROM courses
WHERE id IN (SELECT course_id FROM rel_course_users WHERE user_id = $1)
AND deleted_at IS NULL
LIMIT $3
OFFSET $2
`

type FindAllCoursesByUserParams struct {
	UserID     string
	PageOffset int32
	PageLimit  int32
}

func (q *Queries) FindAllCoursesByUser(ctx context.Context, arg FindAllCoursesByUserParams) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, findAllCoursesByUser, arg.UserID, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCourseByID = `-- name: FindCourseByID :one
SELECT id, name, description, is_active, created_at, updated_at, deleted_at FROM courses
WHERE id = $1
AND deleted_at IS NULL
`

func (q *Queries) FindCourseByID(ctx context.Context, id string) (Course, error) {
	row := q.db.QueryRowContext(ctx, findCourseByID, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findCourseUserByID = `-- name: FindCourseUserByID :one
SELECT id, name FROM users
WHERE id = $1
`

type FindCourseUserByIDRow struct {
	ID   string
	Name string
}

func (q *Queries) FindCourseUserByID(ctx context.Context, id string) (FindCourseUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, findCourseUserByID, id)
	var i FindCourseUserByIDRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
