// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: course_assignments.writer.sql

package xsqlc

import (
	"context"
	"database/sql"
	"time"
)

const saveAssignment = `-- name: SaveAssignment :exec
INSERT INTO assignments
(
    id, assigned_by, "name", "description", 
    "case_input_file_id", "case_output_file_id", 
    "deadline_at", "template",
    "created_at", "updated_at", "deleted_at"
)
VALUES
(
    $1, $2, $3, $4, 
    $5, $6,
    $7, $8,
    $9, $10, $11
)
ON CONFLICT (id) DO UPDATE
SET
    assigned_by = $2, 
    "name" = $3, 
    "description" = $4,     
    "case_input_file_id" = $5, 
    "case_output_file_id" = $6, 
    "deadline_at" = $7, 
    "template" = $8,
    "created_at" = $9, 
    "updated_at" = $10, 
    "deleted_at" = $11
`

type SaveAssignmentParams struct {
	ID               string
	AssignedBy       string
	Name             string
	Description      string
	CaseInputFileID  string
	CaseOutputFileID string
	DeadlineAt       time.Time
	Template         string
	CreatedAt        time.Time
	UpdatedAt        time.Time
	DeletedAt        sql.NullTime
}

func (q *Queries) SaveAssignment(ctx context.Context, arg SaveAssignmentParams) error {
	_, err := q.db.ExecContext(ctx, saveAssignment,
		arg.ID,
		arg.AssignedBy,
		arg.Name,
		arg.Description,
		arg.CaseInputFileID,
		arg.CaseOutputFileID,
		arg.DeadlineAt,
		arg.Template,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	return err
}

const saveAssignmentCourse = `-- name: SaveAssignmentCourse :exec
INSERT INTO rel_assignment_to_course
(
    course_id, assignment_id
)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type SaveAssignmentCourseParams struct {
	CourseID     string
	AssignmentID string
}

func (q *Queries) SaveAssignmentCourse(ctx context.Context, arg SaveAssignmentCourseParams) error {
	_, err := q.db.ExecContext(ctx, saveAssignmentCourse, arg.CourseID, arg.AssignmentID)
	return err
}
