// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: admin_student_courses.reader.sql

package xsqlc

import (
	"context"
)

const countAllStudentsByCourse = `-- name: CountAllStudentsByCourse :one
SELECT COUNT(rel.user_id) FROM rel_course_users rel
WHERE rel.course_id = $1
`

func (q *Queries) CountAllStudentsByCourse(ctx context.Context, courseID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllStudentsByCourse, courseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findAllStudentsByCourse = `-- name: FindAllStudentsByCourse :many
SELECT u.id, u.name FROM users u
JOIN rel_course_users rel ON u.id = rel.user_id
WHERE rel.course_id = $1
ORDER BY rel.user_id DESC
LIMIT $3
OFFSET $2
`

type FindAllStudentsByCourseParams struct {
	CourseID   string
	PageOffset int32
	PageLimit  int32
}

type FindAllStudentsByCourseRow struct {
	ID   string
	Name string
}

func (q *Queries) FindAllStudentsByCourse(ctx context.Context, arg FindAllStudentsByCourseParams) ([]FindAllStudentsByCourseRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllStudentsByCourse, arg.CourseID, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllStudentsByCourseRow
	for rows.Next() {
		var i FindAllStudentsByCourseRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
