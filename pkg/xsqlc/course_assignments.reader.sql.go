// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: course_assignments.reader.sql

package xsqlc

import (
	"context"
	"database/sql"
	"time"
)

const countAllAssignmentsByCourse = `-- name: CountAllAssignmentsByCourse :one
SELECT COUNT(*) FROM assignments asg
JOIN rel_assignment_to_courses rel ON asg.id = rel.assignment_id
WHERE rel.course_id = $1 AND asg.deleted_at is NULL
`

func (q *Queries) CountAllAssignmentsByCourse(ctx context.Context, courseID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllAssignmentsByCourse, courseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findAllAssignmentsByCourseID = `-- name: FindAllAssignmentsByCourseID :many
SELECT asg.id, asg.assigned_by, asg.name, asg.description, asg.case_output_file_id, asg.case_input_file_id, asg.created_at, asg.deadline_at, asg.updated_at, asg.deleted_at, asg.template, rel.course_id FROM assignments asg
JOIN rel_assignment_to_courses rel ON asg.id = rel.assignment_id
WHERE rel.course_id = $1 AND asg.deleted_at is NULL
ORDER BY updated_at DESC
LIMIT $3
OFFSET $2
`

type FindAllAssignmentsByCourseIDParams struct {
	CourseID   string
	PageOffset int32
	PageLimit  int32
}

type FindAllAssignmentsByCourseIDRow struct {
	ID               string
	AssignedBy       string
	Name             string
	Description      string
	CaseOutputFileID string
	CaseInputFileID  string
	CreatedAt        time.Time
	DeadlineAt       time.Time
	UpdatedAt        time.Time
	DeletedAt        sql.NullTime
	Template         string
	CourseID         string
}

func (q *Queries) FindAllAssignmentsByCourseID(ctx context.Context, arg FindAllAssignmentsByCourseIDParams) ([]FindAllAssignmentsByCourseIDRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllAssignmentsByCourseID, arg.CourseID, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllAssignmentsByCourseIDRow
	for rows.Next() {
		var i FindAllAssignmentsByCourseIDRow
		if err := rows.Scan(
			&i.ID,
			&i.AssignedBy,
			&i.Name,
			&i.Description,
			&i.CaseOutputFileID,
			&i.CaseInputFileID,
			&i.CreatedAt,
			&i.DeadlineAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Template,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAssignmentByID = `-- name: FindAssignmentByID :one
SELECT asg.id, asg.assigned_by, asg.name, asg.description, asg.case_output_file_id, asg.case_input_file_id, asg.created_at, asg.deadline_at, asg.updated_at, asg.deleted_at, asg.template, rel.course_id FROM assignments asg
JOIN rel_assignment_to_courses rel ON asg.id = rel.assignment_id
WHERE asg.id = $1 AND asg.deleted_at is NULL
`

type FindAssignmentByIDRow struct {
	ID               string
	AssignedBy       string
	Name             string
	Description      string
	CaseOutputFileID string
	CaseInputFileID  string
	CreatedAt        time.Time
	DeadlineAt       time.Time
	UpdatedAt        time.Time
	DeletedAt        sql.NullTime
	Template         string
	CourseID         string
}

func (q *Queries) FindAssignmentByID(ctx context.Context, id string) (FindAssignmentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, findAssignmentByID, id)
	var i FindAssignmentByIDRow
	err := row.Scan(
		&i.ID,
		&i.AssignedBy,
		&i.Name,
		&i.Description,
		&i.CaseOutputFileID,
		&i.CaseInputFileID,
		&i.CreatedAt,
		&i.DeadlineAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Template,
		&i.CourseID,
	)
	return i, err
}

const findCourseDetailForAssignmentByCourseID = `-- name: FindCourseDetailForAssignmentByCourseID :one
SELECT id, "name", "description" FROM courses WHERE id = $1
`

type FindCourseDetailForAssignmentByCourseIDRow struct {
	ID          string
	Name        string
	Description string
}

func (q *Queries) FindCourseDetailForAssignmentByCourseID(ctx context.Context, id string) (FindCourseDetailForAssignmentByCourseIDRow, error) {
	row := q.db.QueryRowContext(ctx, findCourseDetailForAssignmentByCourseID, id)
	var i FindCourseDetailForAssignmentByCourseIDRow
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
