// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: jobqueue_outbox.reader.sql

package xsqlc

import (
	"context"
)

const findPendingByKey = `-- name: FindPendingByKey :many
SELECT id, idempotent_key, status, job_type, payload FROM outbox_items WHERE idempotent_key = $1 AND "status" = 'pending' LIMIT 1
`

func (q *Queries) FindPendingByKey(ctx context.Context, idempotentKey string) ([]OutboxItem, error) {
	rows, err := q.db.QueryContext(ctx, findPendingByKey, idempotentKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OutboxItem
	for rows.Next() {
		var i OutboxItem
		if err := rows.Scan(
			&i.ID,
			&i.IdempotentKey,
			&i.Status,
			&i.JobType,
			&i.Payload,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
