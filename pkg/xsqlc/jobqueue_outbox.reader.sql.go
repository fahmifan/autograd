// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: jobqueue_outbox.reader.sql

package xsqlc

import (
	"context"
)

const findAllOutboxItemIDsByStatus = `-- name: FindAllOutboxItemIDsByStatus :many
SELECT id FROM outbox_items WHERE "status" = $1 LIMIT $2
`

type FindAllOutboxItemIDsByStatusParams struct {
	Status    string
	SizeLimit int32
}

func (q *Queries) FindAllOutboxItemIDsByStatus(ctx context.Context, arg FindAllOutboxItemIDsByStatusParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findAllOutboxItemIDsByStatus, arg.Status, arg.SizeLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOutboxItemByByKey = `-- name: FindOutboxItemByByKey :one
SELECT id, idempotent_key, status, job_type, payload, version FROM outbox_items WHERE idempotent_key = $1 AND "status" = $2 LIMIT 1
`

type FindOutboxItemByByKeyParams struct {
	IdempotentKey string
	Status        string
}

func (q *Queries) FindOutboxItemByByKey(ctx context.Context, arg FindOutboxItemByByKeyParams) (OutboxItem, error) {
	row := q.db.QueryRowContext(ctx, findOutboxItemByByKey, arg.IdempotentKey, arg.Status)
	var i OutboxItem
	err := row.Scan(
		&i.ID,
		&i.IdempotentKey,
		&i.Status,
		&i.JobType,
		&i.Payload,
		&i.Version,
	)
	return i, err
}

const findOutboxItemByID = `-- name: FindOutboxItemByID :one
SELECT id, idempotent_key, status, job_type, payload, version FROM outbox_items WHERE id = $1
`

func (q *Queries) FindOutboxItemByID(ctx context.Context, id string) (OutboxItem, error) {
	row := q.db.QueryRowContext(ctx, findOutboxItemByID, id)
	var i OutboxItem
	err := row.Scan(
		&i.ID,
		&i.IdempotentKey,
		&i.Status,
		&i.JobType,
		&i.Payload,
		&i.Version,
	)
	return i, err
}
